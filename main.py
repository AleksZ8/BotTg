import logging
from aiogram import types

from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters import BoundFilter
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

import hashlib
import db as database
from button.buttons_menu import buttons, user_buttons, help_button, help

from bot import bot, dp


# CHECK ADMIN
class MyFilter(BoundFilter):
    key = 'is_admin'

    def __init__(self, is_admin):
        self.is_admin = is_admin

    async def check(self, message: types.Message):
        user = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return user.is_chat_admin()


dp.filters_factory.bind(MyFilter)


async def start_on(_):
    print('–æ–Ω–ª–∞–π–Ω')
    database.sql_connect()


# ADMINS
@dp.message_handler(commands=['start', '–Ω–∞—á–∞—Ç—å'], is_admin=True)
async def com_start(message: types.Message):
    await database.db_load(message)


@dp.edited_message_handler(commands=['–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ø—Ä–æ—Ñ–∏–ª–∏'])
@dp.message_handler(commands=['–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ø—Ä–æ—Ñ–∏–ª–∏'])
async def mes_send(message: types.Message):
    await database.db_load(message)


@dp.edited_message_handler(commands=['–ø–æ–º–æ—â—å', 'help'])
@dp.message_handler(commands=['–ø–æ–º–æ—â—å', 'help'])
async def send_help(message: types.Message):
    await message.answer(
        f'–ü–µ—Ä–µ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π /–ø—Ä–æ—Ñ–∏–ª–∏ \n –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è /–∑–∞–≥—Ä—É–∑–∏—Ç—å',
        reply_markup=help_button)


# ADMIN
class FSMAdmin(StatesGroup):
    photo = State()
    name = State()
    text = State()


async def check_adm(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ê–¥–º–∏–Ω', reply_markup=buttons)


async def activ_fsm(message: types.Message):
    await FSMAdmin.photo.set()
    await message.reply('—Ñ–æ—Ç–æ', reply_markup=ReplyKeyboardRemove())
    await message.answer('–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ -> /–æ—Ç–º–µ–Ω–∞')


async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
        await FSMAdmin.next()
        await message.reply('–∏–º—è')


async def name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        await FSMAdmin.next()
        await message.reply('–¢–µ–∫—Å—Ç')


async def text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text

    await database.db_import(state)
    await message.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å')
    await state.finish()


async def cancel(messages: types.Message, state: FSMContext):
    fsm_state = await state.get_state()
    if not fsm_state:
        return
    await state.finish()
    await messages.reply('–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≥–æ', reply_markup=user_buttons)


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(check_adm, commands=['admin'], is_admin=True)
    dp.register_message_handler(activ_fsm, commands=['–∑–∞–≥—Ä—É–∑–∏—Ç—å', 'start', '–Ω–∞—á–∞—Ç—å'], state=None)
    dp.register_message_handler(cancel, state="*", commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(load_photo, content_types=['photo'], state=FSMAdmin.photo)
    dp.register_message_handler(name, content_types=['text'], state=FSMAdmin.name)
    dp.register_message_handler(text, content_types=['text'], state=FSMAdmin.text)


register_handlers_admin(dp)


# DELETE
@dp.callback_query_handler(lambda x: x.data)
async def delete_delete_profile(callback: types.CallbackQuery):
    num = int(callback.data)
    await database.db_delete(num)
    await callback.answer(text=f'–ó–∞–ø–∏—Å—å –ø–æ–¥ ID {num} —É–¥–∞–ª–µ–Ω–∞', show_alert=True)


@dp.message_handler(commands=['—É–¥–∞–ª–∏—Ç—å'])
async def message_delete(message: types.Message):
    id = await database.load_delete()
    print(id)
    for i in id:
        print(i, i[0])
        await message.answer(f'–ü—Ä–æ—Ñ–∏–ª—å{i[0]}', reply_markup=InlineKeyboardMarkup()
                             .add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å{i[0]}', callback_data=f'{i[0]}')))


@dp.inline_handler()
async def inline_handler(message: types.InlineQuery):
    link = 'https://cloud.mail.ru/public/GvVj/mLDgcE6Ja'
    response = [types.InlineQueryResultArticle(
        id='my_profile',
        title='–ú–æ–µ —Ä–µ–∑—é–º–µ',
        url=link,
        input_message_content=types.InputTextMessageContent(
            message_text=f'#–†–µ–∑—é–º–µüìå\n#Pythonüêç \n#Django #SQL\n#Armeniaüá¶üá≤üá¶üá≤\n#—É–¥–∞–ª–µ–Ω–∫–∞\n#–ø–æ–ª–Ω–∞—è #—á–∞—Å—Ç–∏—á–Ω–∞—è \n#Junior '
                         f'\n–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç 40.000—Ä\nüéØPython —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ \nüìñGitHub: https://github.com/AleksZ8\n'
                         f'\t‚úÖ–ö–æ–Ω—Ç–∞–∫—Ç—ã \n–º–æ–±:+374 33-414-634 –í–ü,–¢–ì\nemail: alex.zurnachyan@bk.ru\n{link}'))]

    await message.answer(response, is_personal=True)


# other
@dp.message_handler()
async def other_messages(message: types.Message):
    await message.answer('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ /help', reply_markup=help)


executor.start_polling(dp, skip_updates=True, on_startup=start_on)
logging.basicConfig(level=logging.INFO)
